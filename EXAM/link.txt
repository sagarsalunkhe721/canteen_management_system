#include<iostream>
#ifndef __LINKLIST__
#define __LINKLIST__
using namespace std;

class Node
{

        private:
                int data;
                Node *next;
        public:
                Node()
                {
                }
                Node(int data)
                {
                        this->data=data;
                        this->next=NULL;
                }
                friend class Linklist;
};
class Linklist{
        private:
                Node *head;
        public:
                Linklist(){
                        this->head=NULL;
                }

                void addFirst(int data){
                        Node *newnode=new Node(data);
                        if(head==NULL)
                        {
                                this->head=newnode;
                        }
                        else{
                                newnode->next=head;
                                head=newnode;
                        }
                }

                void addLast(int data){
                        Node *newnode=new Node(data);
                        Node *traverse=head;
                        if(head==NULL)
                        {
                                this->head=newnode;

                        }
                        else{
                                while(traverse->next!=NULL)
                                {
                                        traverse=traverse->next;
                                }
                                traverse->next=newnode;
                        }
                }
                void print()
                {
                        Node *traverse=head;

                        while(traverse!=NULL)
                        {
                                cout<<traverse->data<<"->";
                                traverse=traverse->next;
                        }

                        cout<<"NULL"<<endl;
                }

                void  insertBefore(int data,int before)
                {
                        Node *newnode=new Node(data);
                        Node *traverse=head;
                        Node *previous=NULL;
                        while(traverse->data!=before)
                        {
                                previous=traverse;
                                traverse=traverse->next;
                        }
                        previous->next=newnode;
                        newnode->next=traverse;
                }

                void insertAfter(int data,int after)
                {
                        Node *newnode=new Node(data);
                        Node *traverse=head;
                        while(traverse->data!=after)
                        {
                                traverse=traverse->next;
                        }

                        newnode->next=traverse->next;
                        traverse->next=newnode;
                }

                bool isEmpty()
                {

                        if(head==NULL)
                        {
                                return 1;
                        }
                        return 0;
                }
                bool isFull(){
                        if(newnode()==NULL)
                                return true;
                        return false;

                }

                void deleteFirst()
                {
                        Node *traverse=head;
                        if(!isEmpty())
                        {
                                if(head->next==NULL)
                                {
                                        head=NULL;
                                }
                                else{
                                head=head->next;
                                traverse=NULL;

                                }
                        }
                        else{
                                cout<<"underflow";
                        }

                }
                void deleteLast()
                {
                        Node *traverse=head;
                        Node *previous=NULL;
                        if(head->next==NULL){
                                deleteFirst();
                        }
                        else{
                                while(traverse->next!=NULL)
                                {
                                        previous=traverse;
                                        traverse=traverse->next;
                                }
                                previous->next=NULL;
                                traverse=NULL;

                        }
                }
                void deleteAfter(int pos)
                {
                        Node * traverse=head;

                        while(traverse->data!=pos)
                        {

                                traverse=traverse->next;

                        }
                        if(traverse->next->next==NULL){
                                deleteLast();
                        }
                        else{
                        traverse->next=traverse->next->next;
                        }
                }
                void deleteBefore(int before)
                {

                        Node *traverse=head;
                        Node *previous=NULL;
                        while(traverse->next->data!=before)
                        {
                                previous=traverse;
                                traverse=traverse->next;
                        }
                        previous->next=traverse->next;
                        traverse=NULL;


                }

};

#endif;
/*
int main()
{
        Linklist ll;
        int data,choice,before,after;
        cout<<"1.addFirst\n2.addLast\n3print\n4.addBefore\n5.addAfter";
        do{
        cout<<"enter choice";
        cin>>choice;
        switch(choice){
                case 1:
                        cout<<"enter data";
                        cin>>data;
                        ll.addFirst(data);
                        break;
                case 2:
                         cout<<"enter data";
                        cin>>data;
                        ll.addLast(data);
                        break;
                case 3:
                        ll.print();
                        break;
                case 4:
                        cout<<"enter data and before";
                        cin>>data>>before;
                        ll.insertBefore(data,before);
                        break;
                case 5:
                        cout<<"enter data and after";
                        cin>>data>>after;
                        ll.insertAfter(data,after);
                        break;
                case 6:
                        ll.deleteFirst();
                        break;
                case 7:
                        ll.deleteLast();
                        break;
                case 8:
                        cout<<"enter position";
                        cin>>after;
                        ll.deleteAfter(after);
                        break;
                case 9:
                        cout<<"enter before";
                        cin>>before;
                        ll.deleteBefore(before);
                        break;

        }
        }while(choice!=0);

        return 0;
}*/
